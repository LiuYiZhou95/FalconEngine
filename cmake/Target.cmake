cmake_minimum_required(VERSION 3.0)
cmake_policy(SET CMP0054 NEW)

# NOTE(Wuxiang): Include guard.
if (FALCON_ENGINE_TARGET_INITIALIZED)
    return()
endif()

set(FALCON_ENGINE_TARGET_INITIALIZED TRUE)

include(${FALCON_ENGINE_ROOT_DIR}/cmake/Platform.cmake)

# Set up solution dependency
if(FALCON_ENGINE_PLATFORM_WINDOWS)
    set(FALCON_ENGINE_INCLUDE_DIR 
        ${FALCON_ENGINE_ROOT_DIR}/external/Windows/include/ 
        ${FALCON_ENGINE_ROOT_DIR}/include)
    set(FALCON_ENGINE_LIBRARY_DIR ${FALCON_ENGINE_ROOT_DIR}/external/Windows/lib/)
else()
    fe_assert(FALCON_ENGINE_PLATFORM_LINUX)
    set(FALCON_ENGINE_INCLUDE_DIR 
        ${FALCON_ENGINE_ROOT_DIR}/external/Linux/include/
        ${FALCON_ENGINE_ROOT_DIR}/include)
    set(FALCON_ENGINE_LIBRARY_DIR ${FALCON_ENGINE_ROOT_DIR}/external/Linux/lib/)
endif()

# Set up solution output
if(FALCON_ENGINE_PLATFORM_WINDOWS)
    set(FALCON_ENGINE_ARCHIVE_OUTPUT_DIR ${FALCON_ENGINE_ROOT_DIR}/bin/Windows/)
    set(FALCON_ENGINE_LIBRARY_OUTPUT_DIR ${FALCON_ENGINE_ROOT_DIR}/bin/Windows/)
    set(FALCON_ENGINE_RUNTIME_OUTPUT_DIR ${FALCON_ENGINE_ROOT_DIR}/bin/Windows/)
else()
    fe_assert(FALCON_ENGINE_PLATFORM_LINUX)
    set(FALCON_ENGINE_ARCHIVE_OUTPUT_DIR ${FALCON_ENGINE_ROOT_DIR}/bin/Linux/)
    set(FALCON_ENGINE_LIBRARY_OUTPUT_DIR ${FALCON_ENGINE_ROOT_DIR}/bin/Linux/)
    set(FALCON_ENGINE_RUNTIME_OUTPUT_DIR ${FALCON_ENGINE_ROOT_DIR}/bin/Linux/)
endif()

# Set up library type
fe_assert_defined(FALCON_ENGINE_BUILD_DYNAMIC)
if(FALCON_ENGINE_BUILD_DYNAMIC)
set(FALCON_ENGINE_LIBRARY_TYPE "SHARED")
else()
set(FALCON_ENGINE_LIBRARY_TYPE "STATIC")
endif()